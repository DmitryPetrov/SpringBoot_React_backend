{"version":3,"sources":["logo.svg","WelcomeWindow.js","MessageFromServer.js","WelcomeWindowContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","WelcomeWindow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","textFieldHandler","bind","assertThisInitialized","buttonHandler","actionCreatorInputFrom","event","setState","target","preventDefault","action","store","dispatch","type","name","react_default","a","createElement","className","method","onSubmit","onChange","React","Component","MessageFromServer","message","createStore","assign","console","log","WelcomeWindowContainer","listenerInputForm","subscribe","_this2","getState","axios","get","then","response","data","userName","src_WelcomeWindow","src_MessageFromServer","App","src_WelcomeWindowContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d2f6da2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass WelcomeWindow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n\r\n    this.textFieldHandler = this.textFieldHandler.bind(this);\r\n    this.buttonHandler = this.buttonHandler.bind(this);\r\n    this.actionCreatorInputFrom = this.actionCreatorInputFrom.bind(this);\r\n  }\r\n\r\n  textFieldHandler(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  buttonHandler(event) {\r\n    event.preventDefault();\r\n    let action = this.actionCreatorInputFrom();\r\n    this.props.store.dispatch(action);\r\n  }\r\n\r\n  actionCreatorInputFrom() {\r\n    return {\r\n      type: \"NEW_NAME\",\r\n      name: this.state.value\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"WelcomeWindow\">\r\n        <form action=\"index.html\" method=\"post\" onSubmit={this.buttonHandler}>\r\n          <label>User Name:</label>\r\n          <input type=\"text\" onChange={this.textFieldHandler}/>\r\n          <input type=\"submit\" value=\"Отправить\" />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WelcomeWindow;\r\n","import React from 'react';\r\n\r\nclass MessageFromServer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"MessageFromServer\">\r\n        <h1>Message from server: {this.props.message}</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageFromServer;\r\n","import React from 'react';\r\nimport { createStore } from 'redux'\r\nimport axios from 'axios';\r\n\r\nimport WelcomeWindow from './WelcomeWindow.js'\r\nimport MessageFromServer from './MessageFromServer.js'\r\n\r\nlet store = createStore(reducerInputForm);\r\n\r\n\r\nclass WelcomeWindowContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      message: '',\r\n    };\r\n\r\n    this.listenerInputForm = this.listenerInputForm.bind(this);\r\n    store.subscribe(this.listenerInputForm);\r\n  }\r\n\r\n  listenerInputForm() {\r\n    let name = store.getState().name;\r\n    console.log(name);\r\n    axios.get('/login?userName=' + name).then(response => {\r\n      console.log(response.data);\r\n      this.setState({message: response.data.userName});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <WelcomeWindow store={store} />\r\n        <br />\r\n        <MessageFromServer message={this.state.message} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction reducerInputForm(state, action) {\r\n  if (typeof state === 'undefined') {\r\n    return {name: 'no name'}\r\n  }\r\n\r\n  if (action.type === \"NEW_NAME\") {\r\n    return Object.assign({}, state, {name: action.name})\r\n  }\r\n\r\n  console.log(action);\r\n}\r\n\r\nexport default WelcomeWindowContainer;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WelcomeWindowContainer from './WelcomeWindowContainer.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Spring boot + React</h1>\n      <WelcomeWindowContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}